Revise with Code Spring Boot Based MVC 

Clnt sent requests (URLs)
1. http://host:port/day16_spring_boot_mvc/
Resp : contents : index.jsp

2. After clicking on the link (User Login)
http://host:port/day16_spring_boot_mvc/user/login , method=GET
UserController.showLoginForm() --Rets Log view  name ---> /WEB-INF/views/user/login.jsp
Resp : login.jsp

3. After submitting form
http://host:port/day16_spring_boot_mvc/user/login , method=POST

4. In case of customer's successful login --redirect  CP2 (redirect request)
http://host:port/day16_spring_boot_mvc/customer/topics , method =GET

5. After customer chooses a topic 
URL : http://localhost:8080/day16_spring_boot_mvc/customer/tutorials?topicId=2

w/o Spring form tags : 
<c:forEach var="topic" items="${requestScope.topic_list}">
				<tr>
					<td><input type="radio" name="topicId" value="${topic.id}" /></td>
					<td>${topic.topicName}</td>
				</tr>
			</c:forEach>

With Spring Form Tags (form data binding)
<form:radiobuttons path="id" items="${requestScope.topic_list}" itemLabel="topicName" 		itemValue="id" />

URL : http://localhost:8080/day16_spring_boot_mvc/customer/tutorials?id=2

6. After choosing the tutorial name
URL : http://localhost:8080/day16_spring_boot_mvc/customer/tutorial_details?tut_name=Spring%20MVC , method=GET

7. After clicking on log out link
http://localhost:8080/day16_spring_boot_mvc/user/logout



Complete Customer part at least
-------------------------------------
Enter REST
Diagrams : 
web app vs web service

refer to readmes
1. background
2. 

Go through react app n understand it's flow.

Create a backend. Test it with postman.
Test full stack app.

Steps
1. Create spring boot app : using spring boot starter project (IMPORTANT : choose packaging as JAR)
2. Use same spring boot starters as earlier.
Spring web , Mysql driver , Spring data JPA , Lombok , Spring Dev Tools, validation
3. NO additional dependencies for view layer(i.e no jstl n no tomcat-embeded jasper  dependencies , in pom.xml)

4. Copy application.properties from earlier spring boot project
(No view resolver related properties)
5. Build the layers in bottoms up manner, for the following objectives.

REST API endpoints for User Management CRUD
1. Get All Users : /users
2. Add User Details : User or UserDTO as Request Body (json)
/users + request body
3. Delete User Details
/users/userId
4. Get User details by id
/users/userId
5. Update User details 
/users/userId + User or UserDTO as Request Body (json)

	
